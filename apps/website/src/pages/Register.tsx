import React, { Component } from 'react'
import { Route, Link } from 'react-router-dom'

import '../App.css'
import './styles/Register.css'

import { Paper } from '../components/Paper/Paper'
import { Textbox } from '../components/Textbox/Textbox'
import { Button } from '../components/Button/Button'

import { AppContext } from '../AppContext'
import { handleChangeById as inputHandler, emailValidation } from '../libs/util/inputHandler'
import { auth, database } from '../libs/util/database';
import { timingSafeEqual } from 'crypto';

export class Register extends Component {
  static contextType = AppContext
  context!: React.ContextType<typeof AppContext>

  state = {
    showLogin: false,
    data: {
      regName: null,
      regEmail: null,
      loginEmail: null,
      loginPw: null
    },
    loggedIn: false,
    requiredFulfilled: false,
    fieldsValidated: false,
    required: [
      'regName', 'regEmail', 'regPhone'
    ],
    iterableMembers: []
  }

  handleChangeById = (event: any) => {
    const result = inputHandler(event, this.state)
    this.setState((prevState, props) => (
      result
    ))
  }

  register = async () => {

    /**
     * @todo
     * Register new user with name and email
     * If email exists, don't allow
     * 
     * After register, return userId to AppContext
     */

    // await database.ref("users/" + this.state.data.regEmail).once('value').then((snapshot) => {
    //   if (snapshot.val().length > 0) {
    //     //User already exists
    //   }
    //   else {
    //     auth.createUserWithEmailAndPassword(this.state.data.regEmail, this.state.data.regPassword)
    //       .then(() => {
    //         database.ref("users/" + this.state.data.regEmail).set({
    //           "Email": this.state.data.regEmail,
    //           "FirstName": this.state.data.regName,
    //           "Phone": this.state.data.regPhone
    //         })
    //         this.setState({
    //           userLoggedIn: true
    //         })
    //       })
    //       .catch((error) => {
    //         console.log(error.code);
    //         console.log(error.message)
    //       })
    //   }
    // })
    return
  }

  login = async () => {
    /**
     * @todo
     * Login user with email and passcode, which
     * will be generated by the backend and sent
     * in the confirmation email to the user.
     * 
     * After login, return userId to AppContext
     */
    return
  }

  render() {
    return (
      <article className="register">
        <h1>Register</h1>

        <section>
          <h3>Registrations Open</h3>

          <p>
            If you're a student currently studying at JMI, you can register by filling out the form provided at the link below.
            The last date of registration for JMI students is October 05.
          </p>

          <section>
            {
              this.state.showLogin ? (
                <div style={{ display: 'flex', flexDirection: 'column', alignContent: 'center' }}>
                  <Textbox id="loginEmail" className="dark" placeholder="Email"
                    onChange={this.handleChangeById}
                    validationErrorHelptext="Not a valid email address"
                    validation={(event: any) => {
                      return emailValidation(event.target.value)
                    }}
                    onValidate={() => {
                      this.setState({
                        fieldsValidated: true
                      })
                    }}
                  />

                  <Textbox id="loginPw" className="dark" placeholder="Passcode"
                    type="password" onChange={this.handleChangeById}/>

                  <AppContext.Consumer>
                    {
                      appContext => (
                        <div style={{ display: 'flex', flexDirection: 'row', maxWidth: '24em', margin: '2em auto' }}>
                          <Route render={({ history }) => {
                            return (
                              <Button color="secondary"
                                onClick={() => {
                                  appContext.actions.startAppTransition()
                                  this.login().then(() => {
                                    history.push('/dashboard')
                                  })
                                }}
                              >
                                Login
                              </Button>
                            )
                          }}/>
                        </div>
                      )
                    }
                  </AppContext.Consumer>
                  
                  <div style={{ padding: "2em" }}>
                    Don't have an account? <Link to="#" onClick={() => {
                      this.setState({
                        showLogin: false
                      })
                    }}>Register</Link>
                  </div>
                </div>
              ) : (
                <div style={{ display: 'flex', flexDirection: 'column', alignContent: 'center' }}>
                  <Textbox id="regName" className="dark" placeholder="Name" onChange={this.handleChangeById} />

                  <Textbox id="regEmail" className="dark" placeholder="Email"
                    onChange={this.handleChangeById}
                    validationErrorHelptext="Not a valid email address"
                    validation={(e: any) => {
                      return true
                    }}
                    onValidate={() => {
                      this.setState({
                        fieldsValidated: true
                      })
                    }}
                  />

                  <AppContext.Consumer>
                    {
                      appContext => (
                        <div style={{ display: 'flex', flexDirection: 'row', maxWidth: '24em', margin: '2em auto' }}>                                  
                          <Route render={({ history }) => {
                            return (
                              <Button color="primary"
                                onClick={() => {
                                  appContext.actions.startAppTransition()
                                  this.register().then(() => {
                                    history.push('/dashboard')
                                  })                                    
                                }}
                              >
                                Start
                              </Button>
                            )
                          }} />
                        </div>
                      )
                    }
                  </AppContext.Consumer>
                  
                  <div style={{ padding: "2em" }}>
                    Already Registered? <Link to="#" onClick={() => {
                      this.setState({
                        showLogin: true
                      })
                    }}>Login</Link>
                  </div>
                </div>
              )
            }
          </section>
        </section>
      </article>
    )
  }
}
export default Register
