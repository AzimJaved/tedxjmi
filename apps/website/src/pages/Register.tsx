import React, { Component } from 'react'
import { Route, Link } from 'react-router-dom'
import '../App.css'
import './styles/Register.css'

import { AppContext } from '../AppContext'
import { handleChangeById as inputHandler, emailValidation } from '../libs/util/inputHandler'
import Firestore from '../libs/util/database'
import { APIService } from '../libs/api/api'

import { Paper } from '../components/Paper/Paper'
import { Textbox } from '../components/Textbox/Textbox'
import { Button } from '../components/Button/Button'

import Dashboard from './Dashboard'

export class Register extends Component {
  static contextType = AppContext
  context!: React.ContextType<typeof AppContext>

  registrationService = new APIService()

  state = {
    showLogin: false,
    loggedIn: false,
    intent: 'register',
    user: {
      _id: String(),
      name: String(),
      email: String(),
      phone: String(),
      createdOn: String()
    },
    ticket: {
      _id: String()
    },
    data: {
      regName: null,
      regEmail: null,
      loginEmail: null,
      loginPw: null
    },
    requiredFulfilled: false,
    fieldsValidated: false,
    required: [
      'regName', 'regEmail'
    ],
    iterableMembers: []
  }

  handleChangeById = (event: any) => {
    const result = inputHandler(event, this.state)
    this.setState((prevState, props) => (
      result
    ))
  }

  register = async () => {
    if(this.state.requiredFulfilled) {
      try {
        let user = await this.registrationService.registerUser({
          name: this.state.data.regName,
          email: this.state.data.regEmail
        })
  
        this.setState({
          loggedIn: true,
          user: user.data
        })
        return
      } catch (error) {
        alert(error)
        return
      }
    }
    else
      return Promise.reject()
  }

  login = async () => {
    /**
     * @todo
     * Login user with email and passcode, which
     * will be generated by the backend and sent
     * in the confirmation email to the user.
     * 
     * After login, return user to AppContext
     */

    if(this.state.requiredFulfilled) {
      try {
        let userQuery = await Firestore.collection('Users').where('email', '==', this.state.data.loginEmail).get()
        let user = userQuery.docs[0].data()

        let ticketQuery = await Firestore.collection('Tickets')
          .where('userEmail', '==', this.state.data.loginEmail)
          .where('passcode', '==', this.state.data.loginPw)
          .limit(1)
          .get()
        let ticket = ticketQuery.docs[0].data()

        this.context.actions.setUser(user)
        this.context.actions.setTicket(ticket)
        
        this.setState({
          loggedIn: true
        })
        return
      } catch (error) {
        alert(error)
        return 
      }      
    }
    else
      return Promise.reject()
  }

  render() {
    if(this.state.loggedIn)
      return (
        <article>
          {
            this.state.intent==="register" ? (
              <AppContext.Consumer>
                {
                  ({ state }) => (
                    <Dashboard intent="register" user={this.state.user} />
                  )
                }
              </AppContext.Consumer>
            ) : (
              this.state.intent==="login" ? (
                <AppContext.Consumer>
                  {
                    ({ state }) => (
                      <Dashboard intent="login" user={state.user} ticket={state.ticket} />
                    )
                  }
                </AppContext.Consumer>
              ) : (
                <div></div>
              )
            )
          }
        </article>
      )
    else
      return (
        <article className="register">
          <h1>Register</h1>

          <section>
            <h3>Registrations Open</h3>

            <p style={{ textAlign: 'center' }}>
              Fill in the following form to register for TEDxJMI 2019.
              Please read the terms and conditions carefully before registering.
            </p>

            <section>
              {
                this.state.showLogin ? (
                  <div style={{ display: 'flex', flexDirection: 'column', alignContent: 'center' }}>
                    <Textbox id="loginEmail" className="dark" placeholder="Email"
                      onChange={this.handleChangeById}
                      validationErrorHelptext="Not a valid email address"
                      validation={(e: any) => {
                        return emailValidation(e.target.value)
                      }}
                      onValidate={() => {
                        this.setState({
                          fieldsValidated: true
                        })
                      }}
                    />

                    <Textbox id="loginPw" className="dark" placeholder="Passcode"
                      type="password" onChange={this.handleChangeById}/>

                    <AppContext.Consumer>
                      {
                        appContext => (
                          <div style={{ display: 'flex', flexDirection: 'row', maxWidth: '24em', margin: '2em auto' }}>
                            <Button color="secondary"
                              onClick={() => {
                                appContext.actions.startAppTransition()
                                this.login().then(() => {
                                  appContext.actions.endAppTransition()
                                }).catch(()=>{
                                  alert('Please fill in all fields')
                                  appContext.actions.endAppTransition()
                                })
                              }}
                            >
                              Login
                            </Button>
                          </div>
                        )
                      }
                    </AppContext.Consumer>
                    
                    <div style={{ padding: "2em" }}>
                      Don't have an account? <Link to="#" onClick={() => {
                        this.setState({
                          showLogin: false,
                          intent: 'register',
                          required: [
                            'regName', 'regEmail'
                          ]
                        })
                      }}>Register</Link>
                    </div>
                  </div>
                ) : (
                  <div style={{ display: 'flex', flexDirection: 'column', alignContent: 'center' }}>
                    <Textbox id="regName" className="dark" placeholder="Name" onChange={this.handleChangeById} />

                    <Textbox id="regEmail" className="dark" placeholder="Email"
                      onChange={this.handleChangeById}
                      validationErrorHelptext="Not a valid email address"
                      validation={(e: any) => {
                        return emailValidation(e.target.value)
                      }}
                      onValidate={() => {
                        this.setState({
                          fieldsValidated: true
                        })
                      }}
                    />

                    <AppContext.Consumer>
                      {
                        appContext => (
                          <div style={{ display: 'flex', flexDirection: 'row', maxWidth: '24em', margin: '2em auto' }}>                                  
                            <Button color="primary"
                              onClick={() => {
                                appContext.actions.startAppTransition()
                                this.register().then(()=>{
                                  appContext.actions.endAppTransition()
                                }).catch(()=>{
                                  alert('Please fill in all fields')
                                  appContext.actions.endAppTransition()
                                })
                              }}
                            >
                              Start
                            </Button>
                          </div>
                        )
                      }
                    </AppContext.Consumer>
                    
                    <div style={{ padding: "2em" }}>
                      Already Registered? <Link to="#" onClick={() => {
                        this.setState({
                          showLogin: true,
                          intent: 'login',
                          required: [
                            'loginEmail', 'loginPw'
                          ]
                        })
                      }}>Login</Link>
                    </div>
                  </div>
                )
              }
            </section>
          </section>
        </article>
      )
  }
}
export default Register
